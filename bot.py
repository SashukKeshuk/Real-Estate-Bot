# -*- coding: utf-8 -*-

from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, InlineKeyboardButton, InlineKeyboardMarkup, web_app_info
from config import API
from db import get_lines, get_saved, get_by_id, save
import asyncio

import os

#message.text

webApp = web_app_info.WebAppInfo(url="https://sashukkeshuk.github.io")
b1 = KeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã', web_app=webApp)
markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
markup.add(b1)

markup1 = InlineKeyboardMarkup()

b2 = InlineKeyboardButton('–î–∞–ª–µ–µ', callback_data='next')
bb2 = InlineKeyboardButton('–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ', callback_data='detail')
bbb2 = InlineKeyboardButton('–ú–Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ', callback_data='interested')
bbbb2 = InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')
save_btn = InlineKeyboardButton('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å‚ù§', callback_data='save')

markup1.add(b2).insert(bbbb2).add(bb2).insert(bbb2).add(save_btn)

markup2 = InlineKeyboardMarkup()
b3 = InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã', web_app=webApp)
b4 = InlineKeyboardButton('–ò—Å–∫–∞—Ç—å –∑–∞–Ω–æ–≤–æ', callback_data='again')
markup2.add(b3).insert(b4)

markup3 = InlineKeyboardMarkup()
markup3.add(b2).insert(bbbb2).add(bbb2)

markup4 = InlineKeyboardMarkup()
markup4.add(b3)

next_saved = InlineKeyboardButton('–î–∞–ª–µ–µ', callback_data='next_saved')
previous_saved = InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='previous_saved')

markup5 = InlineKeyboardMarkup()
markup5.add(previous_saved).insert(next_saved).add(b4).add(bb2).add(bbb2)

bot = Bot(token=API)
dp = Dispatcher(bot)

lines = []
chat_id = 0
channel_id = -1001802975422

n = 0
i = 0
j1 = 0
s1 = ""

async def on_startup(_):
	print('bot online')


@dp.message_handler(content_types=['web_app_data'])
async def get(msg: types.Message):
	global chat_id
	print(msg.web_app_data.data)
	data = msg.web_app_data.data
	if (data == "show"):
		global s1
		global j1
		j1 = 0
		s2 = get_saved(chat_id)
		for sx in s2:
			print(str(sx['article_id'][1]) + '|\n')
			s1 += str(sx['article_id'][1])
			s1 += ' '
		await send_saved(msg.from_user.id)
	else:
		nb = 0
		fo = 0
		a = []
		a = data.split(' ')
		j = 0
		HouseT = []
		if (a[0] == 'new_building'):
			nb = 1
			if (a[1] == 'from_the_owner'):
				fo = 1
		else:
			fo = 1
		print(f'fo - {fo}, nb - {nb}')
		if (nb == 1):
			HouseT += [0]
		if (fo == 1):
			HouseT += [1]
		cost1 = int(a[1])
		cost2 = int(a[2])
		cities_get = ""
		f = 0
		for j in range(0, len(a)-1):
			if (a[j][0].isupper()):
				if (f == 0):
					cities_get = a[j]
					f = 1
				else:
					cities_get += ' '
					cities_get += a[j]

		f = 0
		for j in range(0, len(a)-1):
			if (a[j][0].isupper()):
				f = 1
			elif (f == 1):
				break

		Types = []
		for word in a:
			if (word == 'apartment'):
				Types.append(0)
			if (word == 'villa'):
				Types.append(1)
			if (word == 'townhouse'):
				Types.append(2)

		rooms_get = ""
		for j in range(0, len(a)-1):
			if (a[j][0].isnumeric() and j > 2):
				rooms_get = str(a[j])
				rooms_get += ' '

		rooms = rooms_get.split(' ')
		cities = cities_get.split(' ')
		print('cost1 = ' + str(cost1) + ' cost2 = ' + str(cost2) + ' cities = ' + cities_get + ' rooms = ' + str(rooms_get))
		print('Types: ')
		for t in Types:
			print(str(t) + ' ')
		global lines
		lines.clear()
		for room in rooms:
			for city in cities:
				for Type in Types:
					for HT in HouseT:
						q = f"SELECT * FROM `articles` WHERE (cost>={cost1} AND cost<={cost2} AND type={Type} AND house_type={HT} AND rooms='{room}' AND city='{city}');"
						print('#'*20)
						print(q)
						print('#'*20)
						q_get = get_lines(q)
						print(q_get)
						lines += q_get
		global n
		n = len(lines)
		print('*'*20+str(n))
		i = 0
		if (n == 0):
			await send_msg(0, msg.from_user.id)
		else:
			await send_msg(1, msg.from_user.id)



@dp.message_handler(commands=['start'])
async def command_start(message : types.Message):
	global chat_id
	global i
	i = 0
	chat_id = message.from_user.id
	print(chat_id)
	await bot.send_message(message.from_user.id, '''–¢—É—Ä—Ü–∏—è —Å–µ–≥–æ–¥–Ω—è - —ç—Ç–æ –æ–¥–Ω–∞ –∏–∑ —Å–∞–º—ã—Ö –±—ã—Å—Ç—Ä–æ—Ä–∞—Å—Ç—É—â–∏—Ö —ç–∫–æ–Ω–æ–º–∏–∫ –º–∏—Ä–∞, –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã, –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏ –ª–µ–≥–∫–æ—Å—Ç—å –≤–µ–¥–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å–∞ –∑–∞–¥–∞—é—Ç —Ç–µ–º–ø —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ–±—â–µ—Å—Ç–≤–∞ –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª–µ–π. –í—ã—Å–æ–∫–æ–¥–æ—Ö–æ–¥–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏, –≤—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –∑–∞—Ä–ø–ª–∞—Ç, –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–µ—Ç—è–º, –ø—Ä–∏–≤–ª–µ–∫–∞—é—Ç –ª—é–¥–µ–π —Å–æ –≤—Å–µ–≥–æ –º–∏—Ä–∞ –ø—Ä–∏–æ–±—Ä–µ—Ç–∞—Ç—å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –≤ –¢—É—Ä—Ü–∏–∏.''', parse_mode='html')

	await bot.send_message(message.from_user.id, '''–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–¥–æ–±—Ä–∞—Ç—å –∂–∏–ª—å—ë!
–ù–∞ –≤–∞—à –≤—ã–±–æ—Ä —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã, —Ç–∞—É–Ω—Ö–∞—É—Å—ã, —Ä–æ—Å–∫–æ—à–Ω—ã–µ –≤–∏–ª–ª—ã, –Ω–∞–ø—Ä—è–º—É—é –æ—Ç –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤. –í–∞—à –∑–∞–ø—Ä–æ—Å –º—ã –Ω–∞–ø—Ä—è–º—É—é –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –æ—Ñ–∏—Å –ø—Ä–æ–¥–∞–∂ —Ç–æ–ø –º–µ–Ω–µ–¥–∂–µ—Ä—É, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –≤ –∫—Ä–∞—Ç—á–∞–π—à–∏–µ —Å—Ä–æ–∫–∏ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –≤–∞—Å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å!''', parse_mode='html', reply_markup=markup)
	#call()


async def send_saved(cid):
	global s1
	arr = s1.split(' ')
	global chat_id
	global j1
	operator = Bot(API)
	if (j1 == len(arr)):
		await operator.send_message(cid, '—ç—Ç–æ –≤–∞—à–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç—å—è!', parse_mode='html', reply_markup=markup4)
	else:
		p = get_by_id(arr[j1])
		print('\n\n' + str(p[0]['text']) + '\n\n')
		await operator.send_photo(cid, photo=open(f"img/{arr[j1]}.png", "rb"))
		await operator.send_message(cid, p[0]['text'], parse_mode='html', reply_markup=markup5)

@dp.callback_query_handler(text='next_saved')
async def send_next_saved(msg: types.Message):
	global chat_id
	global j1
	j1 += 1
	arr = s1.split(' ')
	for xx in arr:
		if (xx == ''):
			arr.remove(xx)
	print('*'*20 + str(j1))
	if (j1 >= len(arr)):
		await bot.send_message(msg.from_user.id, '—ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç—å—è!', parse_mode='html')
		j1 -= 1
	else:
		print(str(j1) + '       ' + str(len(arr)))
		p = get_by_id(arr[j1])
		await bot.send_photo(msg.from_user.id, photo=open(f"img/{arr[j1]}.png", "rb"))
		await bot.send_message(msg.from_user.id, p[0]['text'], parse_mode='html', reply_markup=markup5)


@dp.callback_query_handler(text='previous_saved')
async def send_previous_saved(msg: types.Message):
	global chat_id
	global j1
	j1 -= 1
	arr = s1.split(' ')
	for xx in arr:
		if (xx == ''):
			arr.remove(xx)
	if (j1 == -1):
		await bot.send_message(msg.from_user.id, '—ç—Ç–æ –ø–µ—Ä–≤–∞—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç—å—è!', parse_mode='html')
		j1 += 1
	else:
		p = get_by_id(arr[j1])
		await bot.send_photo(msg.from_user.id, photo=open(f"img/{arr[j1]}.png", "rb"))
		await bot.send_message(msg.from_user.id, p[0]['text'], parse_mode='html', reply_markup=markup5)
		j1 -= 1


async def send_msg(ok, cid):
	operator = Bot(API)
	print("called")
	global lines
	global i
	global chat_id
	if (ok == 0):
		await operator.send_message(cid, '–ü–æ –¥–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º –Ω–∏—á–µ–≥–æ –Ω–∞–π—Ç–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å', parse_mode='html')
		i = 0
	else:
		await operator.send_photo(cid, photo=open(f"img/{lines[i]['id']}.png", "rb"))
		await operator.send_message(cid, lines[i]['text'], parse_mode='html', reply_markup=markup1)

@dp.callback_query_handler(text='save')
async def save_article(msg : types.Message):
	global chat_id
	saved_art1 = get_saved(chat_id)
	saved_art = ""
	for art in saved_art1:
		print(str(art['article_id'][1]))
		saved_art += str(art['article_id'][1])
		saved_art += ' '
	lid = lines[i]['id']
	if (len(saved_art) == 0):
		f2 = 0
	else:
		arr = saved_art.split(' ')
		f2 = 0
		for art in arr:
			if (int(art) == lid):
				f2 = 1
				await bot.send_message(msg.from_user.id, '—Å—Ç–∞—Ç—å—è —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞', parse_mode='html')
				break

	if (f2 == 0):
		saved_art += ' '
		saved_art += str(lid)
		save(chat_id, saved_art)

@dp.callback_query_handler(text='next')
async def next(message: types.Message):
	global chat_id
	global i
	i += 1
	if (i == n):
		await bot.send_message(message.from_user.id, "–≤—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ –¥–∞–Ω–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É", parse_mode='html', reply_markup=markup)
		i = 0
	else:
		await send_msg(1, message.from_user.id)

@dp.callback_query_handler(text='detail')
async def send_detail(message: types.Message):
	global chat_id
	global i
	await bot.send_photo(message.from_user.id, photo=open(f"img/{lines[i]['id']}.png", "rb"))
	await bot.send_message(chat_id, lines[i]['text2'], parse_mode='html', reply_markup=markup3)

@dp.callback_query_handler(text='interested')
async def interested(msg: types.Message):
	global chat_id
	global channel_id
	global i
	await bot.send_message(msg.from_user.id, "–º—ã –ø–æ–∑–∂–µ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏!", parse_mode='html', reply_markup=markup)
	await bot.send_message(channel_id, f"{msg.from_user.first_name} {msg.from_user.last_name} (@{msg.from_user.username}) –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω –≤–æ {lines[i]['id']}–æ–º –¥–æ–º–µ")

@dp.callback_query_handler(text='back')
async def again(msg: types.Message):
	global i
	global chat_id
	i -= 1
	if (i == -1):
		await bot.send_message(msg.from_user.id, "–≠—Ç–æ –±—ã–ª–∞ –ø–µ—Ä–≤–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞ –∫–æ—Ç–æ—Ä—É—é –≤—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∏ üëÜ", parse_mode='html')
		i = 0
	else:
		await send_msg(1, msg.from_user.id)

executor.start_polling(dp, skip_updates=True, on_startup=on_startup)